# Version: 2025.7.1
# Senzors and automations specific for Raspberry PI boards.

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - action: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'raspberrypi.yaml' %}
            {{ url + account + path + name }}
      
automation:
    # Notify when CPU Temperature is high
  - id: 'cpu_temp'
    alias: "𐃏 CPU Temperature"
    description: ''
    triggers:
      - trigger: numeric_state
        entity_id: sensor.processor_temperature
        above: '80'
    condition: 
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    actions:
      - action: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% elif states.input_text.notify_service.state is defined %}
            {% set notify_service = states('input_text.notify_service') %}
          {% else %}
            {% set notify_service = 'notify.notify' %}
          {% endif %}
          {{ notify_service }}
        data:
          message: "🟡 CPU Temp. = {{ states('sensor.processor_temperature') }}°C"
      - wait_template: "{{ states( 'sensor.processor_temperature' ) | float < 70 }}"
      - action: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% elif states.input_text.notify_service.state is defined %}
            {% set notify_service = states('input_text.notify_service') %}
          {% else %}
            {% set notify_service = 'notify.notify' %}
          {% endif %}
          {{ notify_service }}
        data:
          message: "🟢 CPU Temp. = {{ states('sensor.processor_temperature') }}°C"
    mode: single
    max_exceeded: silent
