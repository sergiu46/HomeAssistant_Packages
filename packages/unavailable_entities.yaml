# Version 2023.10.2
# Package - Unavailable Entities
# Count and list of devices and sensors with a state of unavailable
#
# To change the delay of unavailable notifications create a input number helper named: "|| Delay Notifiy Unavailable"
# and set the number of minutes to wait until send the notification
#
# To change the notification service create an input text helper named: "|| Notify Service Unavailable"
# and put inside the name of the service you want.
# 
# If you want to exlcude entities create an imput select helper named: "|| Ignored Unavailable" 
# and add all entity id's that you want to exclude as options.

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'unavailable_entities.yaml' %}
            {{ url + account + path + name }}

group:
  turn_off_automations:
    entities:
      - automation.unavailable_entities
      - automation.unavailable_sensors

template:
  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "|| Unavailable Entities"
        icon: "hass:shape"
        state: >
              {% if states.input_select.ignored_unavailable.state is defined %}
                {% set ignored = state_attr('input_select.ignored_unavailable','options') %}
              {% else %}
                {% set ignored = [] %}
              {% endif %}
                    
              {{ states
                |selectattr('domain','in',['switch','light','cover','climate','camera','lock','remote'])
                |selectattr('state','in',['unavailable','none'])
                |rejectattr('entity_id','in', ignored )
                |list|count
              }}
        attributes:
            names: >
              {% if states.input_select.ignored_unavailable.state is defined %}
                {% set ignored = state_attr('input_select.ignored_unavailable','options') %}
              {% else %}
                {% set ignored = [] %}
              {% endif %}
                    
              {{ states
                |selectattr('domain','in',['switch','light','cover','climate','camera','lock','remote'])
                |selectattr('state','in',['unavailable','none'])
                |rejectattr('entity_id','in', ignored )
                |map(attribute='name')|join(', ')
              }}

  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "|| Unavailable Sensors"
        icon: "hass:shape"
        state: >
              {% if states.input_select.ignored_unavailable.state is defined %}
                {% set ignored = state_attr('input_select.ignored_unavailable','options') %}
              {% else %}
                {% set ignored = [] %}
              {% endif %}
                    
              {{ states
                |selectattr('domain','in',['sensor','binary_sensor'])
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','in',['temperature','energy','window','door'])
                |selectattr('state', 'in', ['unavailable','unknown','none'])
                |rejectattr('entity_id','in', ignored )
                |list|count
              }}
        attributes:
            names: >
              {% if states.input_select.ignored_unavailable.state is defined %}
                {% set ignored = state_attr('input_select.ignored_unavailable','options') %}
              {% else %}
                {% set ignored = [] %}
              {% endif %}
                  
              {{ states
                |selectattr('domain','in',['sensor','binary_sensor'])
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','in',['temperature','energy','window','door'])
                |selectattr('state', 'in', ['unavailable','unknown','none'])
                |rejectattr('entity_id','in', ignored )
                |map(attribute='name')|join (", ")
              }}

input_number:
  unavailable_entities_last_triggered:
    name: "|| Unavailable Entities Last Triggered"
    icon: "hass:alert-circle"
    mode: box
    min: 0
    max: 99999
    step: 1
  unavailable_sensors_last_triggered:
    name: "|| Unavailable Sensors Last Triggered"
    icon: "hass:alert-circle"
    mode: box
    min: 0
    max: 99999
    step: 1

automation:
  - id: "unavailable_entities"
    alias: "|| Unavailable Entities"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.unavailable_entities
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.unavailable_entities
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_entities
                above: '0'
                below: '2'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_entities_last_triggered') | int
                  != states('sensor.unavailable_entities') | int }}
            sequence:
              - delay: 
                  minutes: >-
                    {% if states.input_number.delay_notify_unavailable.state is defined %}
                      {% set minutes = states('input_number.delay_notify_unavailable') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_entities_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_entities') | int }}"
              - service: >-
                  {% if states.input_text.notify_service_unavailable.state is defined %}
                    {% set notify_service = states('input_text.notify_service_unavailable') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ðŸ”´ Este un dispozitiv indisponibil:
                    â€“ {{ state_attr('sensor.unavailable_entities','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_entities
                above: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_entities_last_triggered') | int
                  != states('sensor.unavailable_entities') | int }}
            sequence:
              - delay: 
                  minutes: >-
                    {% if states.input_number.delay_notify_unavailable.state is defined %}
                      {% set minutes = states('input_number.delay_notify_unavailable') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_entities_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_entities') | int }}"
              - service: >-
                  {% if states.input_text.notify_service_unavailable.state is defined %}
                    {% set notify_service = states('input_text.notify_service_unavailable') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ðŸ”´ Sunt {{ states('sensor.unavailable_entities')|int }} dispozitive indisponibile:
                    â€“ {{ state_attr('sensor.unavailable_entities','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_entities
                below: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_entities_last_triggered') | int > 0 }}
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_unavailable.state is defined %}
                    {% set notify_service = states('input_text.notify_service_unavailable') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: "ðŸŸ¢ Toate dispozitivele funcÈ›ionzeazÄƒ!"
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_entities_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_entities') | int }}"
        default: []

  - id: "unavailable_sensors"
    alias: "|| Unavailable Sensors"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.unavailable_sensors
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.unavailable_sensors
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_sensors
                above: '0'
                below: '2'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_sensors_last_triggered') | int
                  != states('sensor.unavailable_sensors') | int }}
            sequence:
              - delay: 
                  minutes: >-
                    {% if states.input_number.delay_notify_unavailable.state is defined %}
                      {% set minutes = states('input_number.delay_notify_unavailable') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_sensors_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_sensors') | int }}"
              - service: >-
                  {% if states.input_text.notify_service_unavailable.state is defined %}
                    {% set notify_service = states('input_text.notify_service_unavailable') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ðŸ”´ Este un senzor indisponibil:
                    â€“ {{ state_attr('sensor.unavailable_sensors','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_sensors
                above: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_sensors_last_triggered') | int
                  != states('sensor.unavailable_sensors') | int }}
            sequence:
              - delay: 
                  minutes: >-
                    {% if states.input_number.delay_notify_unavailable.state is defined %}
                      {% set minutes = states('input_number.delay_notify_unavailable') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_sensors_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_sensors') | int }}"
              - service: >-
                  {% if states.input_text.notify_service_unavailable.state is defined %}
                    {% set notify_service = states('input_text.notify_service_unavailable') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ðŸ”´ Sunt {{ states('sensor.unavailable_sensors')|int }} senzori indisponibili:
                    â€“ {{ state_attr('sensor.unavailable_sensors','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_sensors
                below: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_sensors_last_triggered') | int > 0 }}
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_unavailable.state is defined %}
                    {% set notify_service = states('input_text.notify_service_unavailable') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: "ðŸŸ¢ ToÈ›i senzorii funcÈ›ionzeazÄƒ!"
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_sensors_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_sensors') | int }}"
        default: []
