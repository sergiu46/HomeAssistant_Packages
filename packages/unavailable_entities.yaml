# Version 2023.04.13-1
# Package - Unavailable Entities
# Count and list of devices and sensors with a state of unavailable
#
# You must set in secrets.yaml
# delay_notify_unavailable: 00:10:00
# notify_service_unavailable: notify.notify
# 
# If you want to exlcude entities create group ignored_unavailable 
# and ignored_unavailable_sensors in groups.yaml
#
# Example:
#  ignored_unavailable:
#    entities:
#       - switch.heater

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% set account = states('input_text.packages_account') %}
            {% set file_path = '/HomeAssistant_Packages/main/packages/unavailable_entities.yaml' %}
            {{ url + account + file_path }}

group:
  ignored_unavailable:
    name: "|| Ingnored Unavailable Devices"
    entities: []
  ignored_unavailable_sensors:
    name: "|| Ingnored Unavailable Sensors"
    entities: []

  turn_off_automations:
    entities:
      - automation.unavailable_entities
      - automation.unavailable_sensors

template:
  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "|| Unavailable Entities"
        icon: "hass:shape"
        state: >
              {{ states
                |selectattr('domain','in',['switch','light','cover','climate','camera','lock','remote'])
                |selectattr('state','in',['unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_unavailable','entity_id'))
                |list|count
              }}
        attributes:
            names: >
              {{ states
                |selectattr('domain','in',['switch','light','cover','climate','camera','lock','remote'])
                |selectattr('state','in',['unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_unavailable','entity_id'))
                |map(attribute='name')|join(', ')
              }}

  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "|| Unavailable Sensors"
        icon: "hass:shape"
        state: >
              {{ states
                |selectattr('domain','in',['sensor','binary_sensor'])
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','in',['temperature','energy','window','door'])
                |selectattr('state', 'in', ['unavailable','unknown','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_unavailable_sensors','entity_id'))
                |list|count
              }}
        attributes:
            names: >
              {{ states
                |selectattr('domain','in',['sensor','binary_sensor'])
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','in',['temperature','energy','window','door'])
                |selectattr('state', 'in', ['unavailable','unknown','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_unavailable_sensors','entity_id'))
                |map(attribute='name')|join (", ")
              }}

input_number:
  unavailable_entities_last_triggered:
    name: "|| Unavailable Entities Last Triggered"
    icon: "hass:alert-circle"
    mode: box
    min: 0
    max: 99999
    step: 1
  unavailable_sensors_last_triggered:
    name: "|| Unavailable Sensors Last Triggered"
    icon: "hass:alert-circle"
    mode: box
    min: 0
    max: 99999
    step: 1

automation:
  - id: "unavailable_entities"
    alias: "|| Unavailable Entities"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.unavailable_entities
      - platform: homeassistant
        event: start
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.unavailable_entities
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_entities
                above: '0'
                below: '2'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_entities_last_triggered') | int
                  != states('sensor.unavailable_entities') | int }}
            sequence:
              - delay: !secret delay_notify_unavailable
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_entities_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_entities') | int }}"
              - service: !secret notify_service_unavailable
                data:
                  message: |
                    ğŸ”´ Este un dispozitiv indisponibil:
                    â€“ {{ state_attr('sensor.unavailable_entities','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_entities
                above: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_entities_last_triggered') | int
                  != states('sensor.unavailable_entities') | int }}
            sequence:
              - delay: !secret delay_notify_unavailable
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_entities_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_entities') | int }}"
              - service: !secret notify_service_unavailable
                data:
                  message: |
                    ğŸ”´ Sunt {{ states('sensor.unavailable_entities')|int }} dispozitive indisponibile:
                    â€“ {{ state_attr('sensor.unavailable_entities','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_entities
                below: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_entities_last_triggered') | int > 0 }}
            sequence:
              - service: !secret notify_service_unavailable
                data:
                  message: "ğŸŸ¢ Toate dispozitivele funcÈ›ionzeazÄƒ!"
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_entities_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_entities') | int }}"
        default: []

  - id: "unavailable_sensors"
    alias: "|| Unavailable Sensors"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.unavailable_sensors
      - platform: homeassistant
        event: start
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.unavailable_sensors
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_sensors
                above: '0'
                below: '2'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_sensors_last_triggered') | int
                  != states('sensor.unavailable_sensors') | int }}
            sequence:
              - delay: !secret delay_notify_unavailable
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_sensors_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_sensors') | int }}"
              - service: !secret notify_service_unavailable
                data:
                  message: |
                    ğŸ”´ Este un senzor indisponibil:
                    â€“ {{ state_attr('sensor.unavailable_sensors','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_sensors
                above: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_sensors_last_triggered') | int
                  != states('sensor.unavailable_sensors') | int }}
            sequence:
              - delay: !secret delay_notify_unavailable
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_sensors_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_sensors') | int }}"
              - service: !secret notify_service_unavailable
                data:
                  message: |
                    ğŸ”´ Sunt {{ states('sensor.unavailable_sensors')|int }} senzori indisponibili:
                    â€“ {{ state_attr('sensor.unavailable_sensors','names').split(',') | join('
                    â€“') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.unavailable_sensors
                below: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.unavailable_sensors_last_triggered') | int > 0 }}
            sequence:
              - service: !secret notify_service_unavailable
                data:
                  message: "ğŸŸ¢ ToÈ›i senzorii funcÈ›ionzeazÄƒ!"
              - service: input_number.set_value
                target:
                  entity_id: input_number.unavailable_sensors_last_triggered
                data:
                  value: "{{ states('sensor.unavailable_sensors') | int }}"
        default: []
