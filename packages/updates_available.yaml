# Version: 2024.06.4
# Updates Available Package
#
# Auto update all addons, firmware, core, os.
# Also send notifications when updates are installed and finished. And if for some reason
# some updates are not installed you will recieve notification that updates are available.
#
# To change the delay of updates notifications create a input number helper named: "Âè£ Delay Notifiy Updates"
# and set the number of hours to wait until send the notification
#
# To change the delay of installing updates create a input number helper called: "Âè£ Delay Auto Update"
# and set how old should be the update before installing
#
# To change the notification service create an input text helper named: "Âè£ Notify Service Updates"
# and put inside the name of the service you want.
#
# If you want to exlcude entities create a label named: "Ignored"
# and apply it to all entities that you want to exclude

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'updates_available.yaml' %}
            {{ url + account + path + name }}

group:
  turn_off_automations:
    entities:
      - automation.updates_available
      - automation.updates_in_progress

template:
  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "Âè£ Updates Available"
        icon: "hass:update"
        state: >
          {% set ignored = label_entities('ignore') %}
                
          {% set result = namespace(updates=[]) %}
          {% if states.input_number.delay_notify_updates.state is defined %}
            {% set hours = states('input_number.delay_notify_updates') | int %}
          {% else %}
            {% set hours = 144 %}
          {% endif %}

          {% for state in states.update 
            |selectattr('state', '==', 'on')
            |rejectattr('entity_id','in', ignored) 
          %}
            {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
              {% set result.updates 
                  = result.updates + [state.name 
                  ~ ' (' ~ state.attributes.installed_version ~ ' -> ' 
                  ~ state.attributes.latest_version ~ ')'] 
                %}
            {% endif %}
          {% endfor %}

          {% for state in states.binary_sensor
            |selectattr('attributes.device_class', 'defined')
            |selectattr('attributes.device_class', '==', 'update')
            |selectattr('state', 'eq', 'on')
            |rejectattr('entity_id','in', ignored ) 
          %}
            {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
              {% set result.updates = result.updates + [state.name ] %}
            {% endif %}
          {% endfor %}

          {{ result.updates|count }}
        attributes:
          names: >
            {% set ignored = label_entities('ignore') %}
                  
            {% set result = namespace(updates=[]) %}
            {% if states.input_number.delay_notify_updates.state is defined %}
              {% set hours = states('input_number.delay_notify_updates') | int %}
            {% else %}
              {% set hours = 144 %}
            {% endif %}

            {% for state in states.update 
              |selectattr('state', '==', 'on')
              |rejectattr('entity_id','in', ignored) 
            %}
              {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                {% set result.updates 
                    = result.updates + [state.name 
                    ~ ' (' ~ state.attributes.installed_version ~ ' -> ' 
                    ~ state.attributes.latest_version ~ ')'] 
                  %}
              {% endif %}
            {% endfor %}

            {% for state in states.binary_sensor
              |selectattr('attributes.device_class', 'defined')
              |selectattr('attributes.device_class', '==', 'update')
              |selectattr('state', 'eq', 'on')
              |rejectattr('entity_id','in', ignored) 
            %}
              {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                {% set result.updates = result.updates + [state.name ] %}
              {% endif %}
            {% endfor %}

            {{ result.updates|join (', ') }}
      - name: "Âè£ Updates in Progress"
        icon: "hass:update"
        state: >
          {{ states.update
            |selectattr('attributes.in_progress','defined')
            |selectattr('attributes.in_progress','true')
            |list|count
          }}
        attributes:
          names: >
            {{ states.update
              |selectattr('attributes.in_progress','defined')
              |selectattr('attributes.in_progress','true')
              |map(attribute='name')|join (", ")
            }}

input_boolean:
  update_available_alert:
    name: "Âè£ Update Available Alert"
    icon: "hass:alert-circle"
  update_in_progress_alert:
    name: "Âè£ Update in Progress Alert"
    icon: "hass:alert-circle"

automation:
  # Notify when updates are available
  - id: "updates_available"
    alias: "Âè£ Updates Available"
    description: ""
    trigger:
      - platform: state
        entity_id: sensor.updates_available
      - platform: state
        entity_id:
          - input_boolean.maintenance_mode
        to: "off"
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: "0"
                below: "2"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ‚öôÔ∏è Este o actualizare disponibilƒÉ:
                    ‚Äì {{ state_attr('sensor.updates_available','names').split(',') |
                    join('
                    ‚Äì') }}
                  data:
                    disable_notification: true
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: "1"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ‚öôÔ∏è Sunt {{ states('sensor.updates_available')|int }} actualizƒÉri
                    disponibile:
                    ‚Äì {{ state_attr('sensor.updates_available','names').split(',') |
                    join('
                    ‚Äì') }}
                  data:
                    disable_notification: true
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                below: "1"
              - condition: state
                entity_id: input_boolean.update_available_alert
                state: "on"
                enabled: true
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: üéâ Dispozitivele »ôi serviciile sunt actualizate!
                  data:
                    disable_notification: true
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
        default: []
    mode: restart

  # Notify when updates are in progress
  - id: "updates_in_progress"
    alias: "Âè£ Updates in Progress"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.updates_in_progress
        for: 00:00:10
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.updates_in_progress
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                above: "0"
                below: "2"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    üîß Este o actualizare √Æn progress:
                    ‚Äì {{ state_attr('sensor.updates_in_progress','names').split(',') | join('
                    ‚Äì') }}
                  data:
                    disable_notification: True
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_in_progress_alert
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                above: "1"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    üîß Sunt {{ states('sensor.updates_in_progress')|int }} actualizƒÉri √Æn progress:
                    ‚Äì {{ state_attr('sensor.updates_in_progress','names').split(',') | join('
                    ‚Äì') }}
                  data:
                    disable_notification: True
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_in_progress_alert
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                below: "1"
              - condition: state
                entity_id: input_boolean.update_in_progress_alert
                state: "on"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: "üéâ Actualizare finalizatƒÉ!"
                  data:
                    disable_notification: True
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.update_in_progress_alert
        default: []

  # Auto install updates
  - id: "auto_update"
    alias: "Âè£ Auto Update"
    description: ""
    trigger:
      - platform: time
        at: 03:30
    condition: []
    action:
      # Addons Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}
                
              {% set result = namespace(updates=[]) %}
              {% if states.input_number.delay_auto_update.state is defined %}
                {% set hours = states('input_number.delay_auto_update') | int %}
              {% else %}
                {% set hours = 72 %}
              {% endif %}

              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |rejectattr('attributes.device_class', '==', 'firmware')
                |rejectattr('entity_id','in', ignored ) 
                |rejectattr('entity_id', 'in', 
                  [
                    'update.home_assistant_operating_system_update',
                    'update.home_assistant_core_update',
                    'update.esphome_update'
                  ])
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endif %}
              {% endfor %}

              {{ result.updates|count > 0 }}
        then:
          - service: update.install
            target:
              entity_id: |-
                {% set ignored = label_entities('ignore') %}
                  
                {% set result = namespace(updates=[]) %}
                {% if states.input_number.delay_auto_update.state is defined %}
                  {% set hours = states('input_number.delay_auto_update') | int %}
                {% else %}
                  {% set hours = 72 %}
                {% endif %}

                {% for state in states.update 
                  |selectattr('state', '==', 'on')
                  |rejectattr('attributes.device_class', '==', 'firmware')
                  |rejectattr('entity_id','in', ignored ) 
                  |rejectattr('entity_id', 'in', 
                    [
                      'update.home_assistant_operating_system_update',
                      'update.home_assistant_core_update',
                      'update.esphome_update'
                    ])
                %}
                  {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                    {% set result.updates = result.updates + [state.entity_id] %}
                  {% endif %}
                {% endfor %}

                {{ result.updates|list }}

      # Firmware Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}

              {% set result = namespace(updates=[]) %}
                {% if states.input_number.delay_auto_update.state is defined %}
                  {% set hours = states('input_number.delay_auto_update') | int %}
                {% else %}
                  {% set hours = 96 %}
                {% endif %}

              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |selectattr('attributes.device_class', '==', 'firmware')
                |rejectattr('entity_id','in', ignored )
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endif %}
              {% endfor %}

              {{ result.updates|count > 0 }}
        then:
          - service: update.install
            target:
              entity_id: |-
                {% set ignored = label_entities('ignore') %}

                {% set result = namespace(updates=[]) %}
                  {% if states.input_number.delay_auto_update.state is defined %}
                    {% set hours = states('input_number.delay_auto_update') | int %}
                  {% else %}
                    {% set hours = 96 %}
                  {% endif %}

                {% for state in states.update 
                  |selectattr('state', '==', 'on')
                  |selectattr('attributes.device_class', '==', 'firmware')
                  |rejectattr('entity_id','in', ignored )
                %}
                  {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                    {% set result.updates = result.updates + [state.entity_id] %}
                  {% endif %}
                {% endfor %}

                {{ result.updates|list }}

      # ESPHome Update
      - if:
          - condition: or
            conditions:
              - condition: template
                value_template: |-
                  {% set ignored = label_entities('ignore') %}

                  {% set result = namespace(updates=[]) %}
                  {% if states.input_number.delay_auto_update.state is defined %}
                    {% set hours = states('input_number.delay_auto_update') | int %}
                  {% else %}
                    {% set hours = 120 %}
                  {% endif %}

                  {% for state in states.update 
                    |selectattr('state', 'eq', 'on')
                    |selectattr('entity_id', 'in', ['update.esphome_update' ])
                    |rejectattr('entity_id','in', ignored )  
                  %}
                    {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                      {% set result.updates = result.updates + [state.entity_id] %}
                    {% endif %}
                  {% endfor %}
                  {{ result.updates | count > 0 }}
              - condition: template
                value_template: |-
                  {% set ignored = label_entities('ignore') %}

                  {% set result = namespace(updates=[]) %}
                  {% for state in states.update 
                    |selectattr('state', '==', 'on')
                    |selectattr('attributes.title', '==', 'ESPHome')
                    |rejectattr('entity_id', 'in', ['update.esphome_update'])
                    |rejectattr('entity_id','in', ignored )  
                  %}
                    {% set result.updates = result.updates + [state.entity_id] %}
                  {% endfor %}

                  {{ result.updates | count > 0 }}
        then:
          - if:
              - condition: template
                value_template: |-
                  {% if states.update.esphome_update.state is defined  %}
                    {{ is_state('update.esphome_update', 'on') }}
                  {% else %}
                    {{ false }}
                  {% endif %}
            then:
              - service: update.install
                data:
                  backup: true
                target:
                  entity_id: update.esphome_update
              - delay:
                  minutes: 10
          - if:
              - condition: template
                value_template: |-
                  {% set ignored = label_entities('ignore') %}

                  {% set result = namespace(updates=[]) %}
                  {% for state in states.update 
                    |selectattr('state', '==', 'on')
                    |selectattr('attributes.title', '==', 'ESPHome')
                    |rejectattr('entity_id', '==', 'update.esphome_update')
                    |rejectattr('entity_id','in', ignored )  
                  %}
                    {% set result.updates = result.updates + [state.entity_id] %}
                  {% endfor %}

                  {{ result.updates|count > 0 }}
            then:
              - service: update.install
                data: {}
                target:
                  entity_id: |-
                    {% set ignored = label_entities('ignore') %}

                    {% set result = namespace(updates=[]) %}
                    {% for state in states.update 
                      |selectattr('state', '==', 'on')
                      |selectattr('attributes.title', '==', 'ESPHome')
                      |rejectattr('entity_id', '==', 'update.esphome_update')
                      |rejectattr('entity_id','in', ignored )  
                    %}
                      {% set result.updates = result.updates + [state.entity_id] %}
                    {% endfor %}

                    {{ result.updates|list }}

      # Wait to finish updates in progress
      - wait_template: "{{ states('sensor.updates_in_progress') | int == 0 }}"

      # Core Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}

              {% set result = namespace(updates=[]) %}
              {% if states.input_number.delay_auto_update.state is defined %}
                {% set hours = states('input_number.delay_auto_update') | int %}
              {% else %}
                {% set hours = 72 %}
              {% endif %}

              {% for state in states.update 
                |selectattr('state', 'eq', 'on')
                |selectattr('entity_id', 'in', ['update.home_assistant_core_update' ])
                |rejectattr('entity_id','in', ignored )  
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endif %}
              {% endfor %}

              {{ result.updates | count > 0 }}
        then:
          - service: update.install
            data:
              backup: true
            target:
              entity_id: update.home_assistant_core_update

      # Wait to finish updates in progress
      - wait_template: "{{ states('sensor.updates_in_progress') | int == 0 }}"

      # OS Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}

              {% set result = namespace(updates=[]) %}
              {% if states.input_number.delay_auto_update.state is defined %}
                {% set hours = states('input_number.delay_auto_update') | int %}
              {% else %}
                {% set hours = 120 %}
              {% endif %}

              {% for state in states.update 
                |selectattr('state', 'eq', 'on')
                |selectattr('entity_id', 'in', ['update.home_assistant_operating_system_update' ])
                |rejectattr('entity_id','in', ignored )  
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endif %}
              {% endfor %}

              {{ result.updates | count > 0 }}
        then:
          - service: update.install
            target:
              entity_id: update.home_assistant_operating_system_update
