# Version: 2023.10.6
#
# Package - Updates Available
# List all available updates of entities with device class update
#
# You must set in secrets.yaml
# notify_service_updates: "notify.notify"
# 
# To change the delay create a Delay Updates input number helper with the value of delay in hours
#
# If you want to exlcude entities create group ignored_updates in groups.yaml
#
# Example:
# ignored_updates:
#   entities:
#     - binary_sensor.updater

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
                {% set account = states('input_text.packages_account') %}
              {% else %}
                {% set account = 'topaniot' %}
            {% endif %}
            {% set file_path = '/HomeAssistant_Packages/main/packages/updates_available.yaml' %}
            {{ url + account + file_path }}

group:
  ignored_updates:
    name: "|| Ignored Updates"
    entities: []

  turn_off_automations:
    entities:
      - automation.updates_available
      - automation.updates_in_progress

template:
  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "|| Updates Available"
        icon: "hass:update"
        state: >
              {% set result = namespace(updates=[]) %}
              {% if states.input_number.delay_updates.state is defined %}
                {% set hours = states('input_number.delay_updates') | int %}
              {% else %}
                {% set hours = 120 %}
              {% endif %}
              
              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates 
                      = result.updates + [state.name 
                      ~ ' (' ~ state.attributes.installed_version ~ ' -> ' 
                      ~ state.attributes.latest_version ~ ')'] 
                    %}
                {% endif %}
              {% endfor %}
              
              {% for state in states.binary_sensor
                |selectattr('attributes.device_class', 'defined')
                |selectattr('attributes.device_class', '==', 'update')
                |selectattr('state', 'eq', 'on')
                |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id')) 
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.name ] %}
                {% endif %}
              {% endfor %}

              {{ result.updates|count }}
        attributes:
            names: >
              {% set result = namespace(updates=[]) %}
              {% if states.input_number.delay_updates.state is defined %}
                {% set hours = states('input_number.delay_updates') | int %}
              {% else %}
                {% set hours = 120 %}
              {% endif %}
              
              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates 
                      = result.updates + [state.name 
                      ~ ' (' ~ state.attributes.installed_version ~ ' -> ' 
                      ~ state.attributes.latest_version ~ ')'] 
                    %}
                {% endif %}
              {% endfor %}
              
              {% for state in states.binary_sensor
                |selectattr('attributes.device_class', 'defined')
                |selectattr('attributes.device_class', '==', 'update')
                |selectattr('state', 'eq', 'on')
                |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id')) 
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.name ] %}
                {% endif %}
              {% endfor %}

              {{ result.updates|join (', ') }}
      - name: "|| Updates in Progress"
        icon: "hass:update"
        state: >
              {{ states.update
                |selectattr('attributes.in_progress','defined')
                |selectattr('attributes.in_progress','true')
                |list|count
              }}
        attributes:
            names: >
              {{ states.update
                |selectattr('attributes.in_progress','defined')
                |selectattr('attributes.in_progress','true')
                |map(attribute='name')|join (", ")
              }}

input_boolean:
  update_available_alert:
    name: "|| Update Available Alert"
    icon: "hass:alert-circle"
  update_in_progress_alert:
    name: "|| Update in Progress Alert"
    icon: "hass:alert-circle"

automation:
  # Notify when updates are available
  - id: "updates_available"
    alias: "|| Updates Available"
    description: ""
    trigger:
      - platform: state
        entity_id: sensor.updates_available
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: "0"
                below: "2"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service_updates = states('input_text.notify_service_updates') %}
                    {% else %}
                      {% set notify_service_updates = 'notify' %}
                  {% endif %}
                  {% set file_path = '/HomeAssistant_Packages/main/packages/updates_available.yaml' %}
                  {{ "notify." + notify_service_updates }}
                data:
                  message: |
                    ⚙️ Este o actualizare disponibilă:
                    – {{ state_attr('sensor.updates_available','names').split(',') |
                    join('
                    –') }}
                  data:
                    disable_notification: true
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: "1"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service_updates = states('input_text.notify_service_updates') %}
                    {% else %}
                      {% set notify_service_updates = 'notify' %}
                  {% endif %}
                  {% set file_path = '/HomeAssistant_Packages/main/packages/updates_available.yaml' %}
                  {{ "notify." + notify_service_updates }}
                data:
                  message: |
                    ⚙️ Sunt {{ states('sensor.updates_available')|int }} actualizări
                    disponibile:
                    – {{ state_attr('sensor.updates_available','names').split(',') |
                    join('
                    –') }}
                  data:
                    disable_notification: true
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                below: "1"
              - condition: state
                entity_id: input_boolean.update_available_alert
                state: "on"
                enabled: true
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service_updates = states('input_text.notify_service_updates') %}
                    {% else %}
                      {% set notify_service_updates = 'notify' %}
                  {% endif %}
                  {% set file_path = '/HomeAssistant_Packages/main/packages/updates_available.yaml' %}
                  {{ "notify." + notify_service_updates }}
                data:
                  message: 🎉 Dispozitivele și serviciile sunt actualizate!
                  data:
                    disable_notification: true
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
        default: []
    mode: restart


# Notify when updates are in progress
  - id: "updates_in_progress"
    alias: "|| Updates in Progress"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.updates_in_progress
        for: 00:00:10
      - platform: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.updates_in_progress
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                above: '0'
                below: '2'
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service_updates = states('input_text.notify_service_updates') %}
                    {% else %}
                      {% set notify_service_updates = 'notify' %}
                  {% endif %}
                  {% set file_path = '/HomeAssistant_Packages/main/packages/updates_available.yaml' %}
                  {{ "notify." + notify_service_updates }}
                data:
                  message: |
                    🔧 Este o actualizare în progress:
                    – {{ state_attr('sensor.updates_in_progress','names').split(',') | join('
                    –') }}
                  data:
                    disable_notification: True
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_in_progress_alert
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                above: '1'
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service_updates = states('input_text.notify_service_updates') %}
                    {% else %}
                      {% set notify_service_updates = 'notify' %}
                  {% endif %}
                  {% set file_path = '/HomeAssistant_Packages/main/packages/updates_available.yaml' %}
                  {{ "notify." + notify_service_updates }}
                data:
                  message: |
                    🔧 Sunt {{ states('sensor.updates_in_progress')|int }} actualizări în progress:
                    – {{ state_attr('sensor.updates_in_progress','names').split(',') | join('
                    –') }}
                  data:
                    disable_notification: True
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_in_progress_alert
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                below: '1'
              - condition: state
                entity_id: input_boolean.update_in_progress_alert
                state: 'on'
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service_updates = states('input_text.notify_service_updates') %}
                    {% else %}
                      {% set notify_service_updates = 'notify' %}
                  {% endif %}
                  {% set file_path = '/HomeAssistant_Packages/main/packages/updates_available.yaml' %}
                  {{ "notify." + notify_service_updates }}
                data:
                  message: "🎉 Actualizare finalizată!"
                  data:
                    disable_notification: True
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.update_in_progress_alert
        default: []

  # Auto install updates
  - id: "auto_update"
    alias: "|| Auto Update"
    description: ""
    trigger:
      - platform: time
        at: 03:30
    condition: []
    action:
      - choose:
          # Addons Update
          - conditions:
              - condition: template
                value_template: >
                  {% set result = namespace(updates=[]) %}
                  {% if states.input_number.delay_autoupdate.state is defined %}
                    {% set hours = states('input_number.delay_autoupdate') | int %}
                  {% else %}
                    {% set hours = 72 %}
                  {% endif %}
                  
                  {% for state in states.update 
                    |selectattr('state', '==', 'on')
                    |rejectattr('attributes.device_class', '==', 'firmware')
                    |rejectattr('entity_id', 'in', ['update.home_assistant_operating_system_update','update.home_assistant_core_update'])
                    |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
                  %}
                    {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                      {% set result.updates = result.updates + [state.entity_id] %}
                    {% endif %}
                  {% endfor %}
                  
                  {{ result.updates|count > 0 }}
            sequence:
              - service: update.install
                data:
                  backup: true
                target:
                  entity_id: >
                      {% set result = namespace(updates=[]) %}
                      {% if states.input_number.delay_autoupdate.state is defined %}
                        {% set hours = states('input_number.delay_autoupdate') | int %}
                      {% else %}
                        {% set hours = 72 %}
                      {% endif %}
                      
                      {% for state in states.update 
                        |selectattr('state', '==', 'on')
                        |rejectattr('attributes.device_class', '==', 'firmware')
                        |rejectattr('entity_id', 'in', ['update.home_assistant_operating_system_update','update.home_assistant_core_update'])
                        |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
                      %}
                            {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                          {% set result.updates = result.updates + [state.entity_id] %}
                        {% endif %}
                      {% endfor %}
                      
                      {{ result.updates|list }}
          # ESPHome Update 
          - conditions:
              - condition: or
                conditions:
                  - condition: template
                    value_template: >
                      {% if states.input_number.delay_autoupdate.state is defined %}
                        {% set hours = states('input_number.delay_autoupdate') | int %}
                      {% else %}
                        {% set hours = 96 %}
                      {% endif %}
                      
                      {% if states.update.esphome_update.state is defined %}
                        {{ as_timestamp(states.update.esphome_update.last_changed) | int + 60*60*hours < as_timestamp(now()) | int }}
                      {% else %}
                        {{ false }}
                      {% endif %}
                  - condition: template
                    value_template: >
                      {% set result = namespace(updates=[]) %}
                      {% for state in states.update 
                        |selectattr('state', '==', 'on')
                        |selectattr('attributes.title', '==', 'ESPHome')
                        |rejectattr('entity_id', '==', 'update.esphome_update')
                        |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
                      %}
                        {% set result.updates = result.updates + [state.entity_id] %}
                      {% endfor %}
                      {{ result.updates|count > 0 }}
            sequence:
              - if:
                  - condition: template
                    value_template: >
                      {% if states.update.esphome_update.state is defined  %}
                        {{ is_state('update.esphome_update', 'on') }}
                      {% else %}
                        {{ false }}
                      {% endif %}
                then:
                  - service: update.install
                    data:
                      backup: true
                    target:
                      entity_id: update.esphome_update
                  - delay: "00:10:00"
              - if:
                  - condition: template
                    value_template: >
                      {% set result = namespace(updates=[]) %}
                      {% for state in states.update 
                        |selectattr('state', '==', 'on')
                        |selectattr('attributes.title', '==', 'ESPHome')
                        |rejectattr('entity_id', '==', 'update.esphome_update')
                        |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
                      %}
                        {% set result.updates = result.updates + [state.entity_id] %}
                      {% endfor %}
                      {{ result.updates|count > 0 }}
                then:
                  - service: update.install
                    data: {}
                    target:
                      entity_id: >
                          {% set result = namespace(updates=[]) %}
                          {% for state in states.update 
                            |selectattr('state', '==', 'on')
                            |selectattr('attributes.title', '==', 'ESPHome')
                            |rejectattr('entity_id', '==', 'update.esphome_update')
                            |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
                          %}
                            {% set result.updates = result.updates + [state.entity_id] %}
                          {% endfor %}
                          {{ result.updates|list }}


          # Firmware Update
          - conditions:
              - condition: template
                value_template: >
                  {% set result = namespace(updates=[]) %}
                  {% if states.input_number.delay_autoupdate.state is defined %}
                    {% set hours = states('input_number.delay_autoupdate') | int %}
                  {% else %}
                    {% set hours = 72 %}
                  {% endif %}
                  
                  {% for state in states.update 
                    |selectattr('state', '==', 'on')
                    |selectattr('attributes.device_class', '==', 'firmware')
                    |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
                  %}
                    {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                      {% set result.updates = result.updates + [state.entity_id] %}
                    {% endif %}
                  {% endfor %}
                  
                  {{ result.updates|count > 0 }}
            sequence:
              - service: update.install
                target:
                  entity_id: >
                      {% set result = namespace(updates=[]) %}
                      {% if states.input_number.delay_autoupdate.state is defined %}
                        {% set hours = states('input_number.delay_autoupdate') | int %}
                      {% else %}
                        {% set hours = 72 %}
                      {% endif %}
                      
                      {% for state in states.update 
                        |selectattr('state', '==', 'on')
                        |selectattr('attributes.device_class', '==', 'firmware')
                        |rejectattr('entity_id','in',state_attr('group.ignored_updates','entity_id'))  
                      %}
                        {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                          {% set result.updates = result.updates + [state.entity_id] %}
                        {% endif %}
                      {% endfor %}
                      
                      {{ result.updates|list }}

          # Core Update
          - conditions:
              - condition: template
                value_template: >
                  {% if states.input_number.delay_autoupdate.state is defined %}
                    {% set hours = states('input_number.delay_autoupdate') | int %}
                  {% else %}
                    {% set hours = 72 %}
                  {% endif %}
                  {{ as_timestamp(states.update.home_assistant_core_update.last_changed) | int + 60*60*hours < as_timestamp(now()) | int }}
            sequence:
              - service: update.install
                data:
                  backup: true
                target:
                  entity_id: update.home_assistant_core_update

          # OS Update
          - conditions:
              - condition: template
                value_template: >
                  {% if states.input_number.delay_autoupdate.state is defined %}
                    {% set hours = states('input_number.delay_autoupdate') | int %}
                  {% else %}
                    {% set hours = 120 %}
                  {% endif %}
                  {{ as_timestamp(states.update.home_assistant_operating_system_update.last_changed) | int + 60*60*hours < as_timestamp(now()) | int }}
            sequence:
              - service: update.install
                data:
                  backup: false
                target:
                  entity_id: update.home_assistant_operating_system_update
