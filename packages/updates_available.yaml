# Version: 2025.4.5
# Updates Available Package
#
# Auto update all addons, firmware, core, os.
# Also send notifications when updates are installed and finished. And if for some reason
# some updates are not installed you will recieve notification that updates are available.
#
# To change the delay of updates notifications create a input number helper named: "𐃏 Delay Notifiy Updates"
# and set the number of hours to wait until send the notification
#
# To change the delay of installing updates create a input number helper called: "𐃏 Delay Auto Update"
# and set how old should be the update before installing
#
# To change the notification service create an input text helper named: "𐃏 Notify Service Updates"
# and put inside the name of the service you want.
#
# If you want to exlcude entities create a label named: "Ignored"
# and apply it to all entities that you want to exclude

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - action: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'updates_available.yaml' %}
            {{ url + account + path + name }}

template:
  - trigger:
      - trigger: time_pattern
        seconds: "/1"
    sensor:
      - name: "𐃏 Updates Available"
        icon: "hass:update"
        state: >
          {% set ignored = label_entities('ignore') %}
                
          {% set result = namespace(updates=[]) %}
          {% if states.input_number.delay_notify_updates.state is defined %}
            {% set hours = states('input_number.delay_notify_updates') | int %}
          {% else %}
            {% set hours = 144 %}
          {% endif %}

          {% for state in states.update 
            |selectattr('state', '==', 'on')
            |rejectattr('entity_id','in', ignored) 
          %}
            {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
              {% set result.updates 
                  = result.updates + [state.name 
                  ~ ' (' ~ state.attributes.installed_version ~ ' -> ' 
                  ~ state.attributes.latest_version ~ ')'] 
                %}
            {% endif %}
          {% endfor %}

          {% for state in states.binary_sensor
            |selectattr('attributes.device_class', 'defined')
            |selectattr('attributes.device_class', '==', 'update')
            |selectattr('state', 'eq', 'on')
            |rejectattr('entity_id','in', ignored ) 
          %}
            {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
              {% set result.updates = result.updates + [state.name ] %}
            {% endif %}
          {% endfor %}

          {{ result.updates|count }}
        attributes:
          names: >
            {% set ignored = label_entities('ignore') %}
                  
            {% set result = namespace(updates=[]) %}
            {% if states.input_number.delay_notify_updates.state is defined %}
              {% set hours = states('input_number.delay_notify_updates') | int %}
            {% else %}
              {% set hours = 144 %}
            {% endif %}

            {% for state in states.update 
              |selectattr('state', '==', 'on')
              |rejectattr('entity_id','in', ignored) 
            %}
              {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                {% set result.updates 
                    = result.updates + [state.name 
                    ~ ' (' ~ state.attributes.installed_version ~ ' -> ' 
                    ~ state.attributes.latest_version ~ ')'] 
                  %}
              {% endif %}
            {% endfor %}

            {% for state in states.binary_sensor
              |selectattr('attributes.device_class', 'defined')
              |selectattr('attributes.device_class', '==', 'update')
              |selectattr('state', 'eq', 'on')
              |rejectattr('entity_id','in', ignored) 
            %}
              {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                {% set result.updates = result.updates + [state.name ] %}
              {% endif %}
            {% endfor %}

            {{ result.updates|join (', ') }}
      - name: "𐃏 Updates in Progress"
        icon: "hass:update"
        state: >
          {{ states.update
            |selectattr('attributes.in_progress','defined')
            |selectattr('attributes.in_progress','true')
            |list|count
          }}
        attributes:
          names: >
            {{ states.update
              |selectattr('attributes.in_progress','defined')
              |selectattr('attributes.in_progress','true')
              |map(attribute='name')|join (", ")
            }}

input_boolean:
  update_available_alert:
    name: "𐃏 Update Available Alert"
    icon: "hass:alert-circle"
  update_in_progress_alert:
    name: "𐃏 Update in Progress Alert"
    icon: "hass:alert-circle"

automation:
  # Notify when updates are available
  - id: "updates_available"
    alias: "𐃏 Updates Available"
    description: ""
    triggers:
      - trigger: state
        entity_id: sensor.updates_available
      - trigger: state
        entity_id:
          - input_boolean.maintenance_mode
        to: "off"
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
      - condition: template
        value_template: "{{ states.sensor.updates_available.state is defined }}"
    actions:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: "0"
                below: "2"
            sequence:
              - action: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚙️ Este o actualizare disponibilă:
                    – {{ state_attr('sensor.updates_available','names').split(',') |
                    join('
                    –') }}
                  data:
                    disable_notification: true
              - action: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                above: "1"
            sequence:
              - action: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚙️ Sunt {{ states('sensor.updates_available')|int }} actualizări
                    disponibile:
                    – {{ state_attr('sensor.updates_available','names').split(',') |
                    join('
                    –') }}
                  data:
                    disable_notification: true
              - action: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_available
                below: "1"
              - condition: state
                entity_id: input_boolean.update_available_alert
                state: "on"
                enabled: true
            sequence:
              - action: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: 🎉 Dispozitivele și serviciile sunt actualizate!
                  data:
                    disable_notification: true
              - action: input_boolean.turn_off
                target:
                  entity_id: input_boolean.update_available_alert
                data: {}
                enabled: true
        default: []
    mode: restart

  # Notify when updates are in progress
  - id: "updates_in_progress"
    alias: "𐃏 Updates in Progress"
    mode: restart
    triggers:
      - trigger: state
        entity_id: sensor.updates_in_progress
      - trigger: homeassistant
        event: start
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
      - condition: template
        value_template: "{{ states.sensor.updates_in_progress.state is defined }}"
    actions:
      - delay:
          seconds: 10
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                above: "0"
                below: "2"
            sequence:
              - action: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    🔧 Este o actualizare în progress:
                    – {{ state_attr('sensor.updates_in_progress','names').split(',') | join('
                    –') }}
                  data:
                    disable_notification: True
              - action: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_in_progress_alert
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                above: "1"
            sequence:
              - action: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    🔧 Sunt {{ states('sensor.updates_in_progress')|int }} actualizări în progress:
                    – {{ state_attr('sensor.updates_in_progress','names').split(',') | join('
                    –') }}
                  data:
                    disable_notification: True
              - action: input_boolean.turn_on
                target:
                  entity_id: input_boolean.update_in_progress_alert
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                below: "1"
              - condition: state
                entity_id: input_boolean.update_in_progress_alert
                state: "on"
            sequence:
              - action: >-
                  {% if states.input_text.notify_service_updates.state is defined %}
                      {% set notify_service = states('input_text.notify_service_updates') %}
                    {% elif states.input_text.notify_service.state is defined %}
                      {% set notify_service = states('input_text.notify_service') %}
                    {% else %}
                      {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: "🎉 Actualizare finalizată!"
                  data:
                    disable_notification: True
              - action: input_boolean.turn_off
                target:
                  entity_id: input_boolean.update_in_progress_alert
        default: []

  # Auto install updates
  - id: "auto_update"
    alias: "𐃏 Auto Update"
    description: ""
    triggers:
      - trigger: template
        value_template: |-
          {% if states.input_datetime.auto_update_time.state is defined %}
            {% set time = states('input_datetime.auto_update_time')  %}
          {% else %}
            {% set time = "03:30:00" %}
          {% endif %}
          {{ time == now().timestamp() | timestamp_custom('%H:%M:%S') }} 
    condition: []
    action:

      # Addons Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}
              {% set result = namespace(updates=[]) %}
              {% set hours_map = {0: 72, 1: 24} %}

              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |selectattr('attributes.supported_features', '==', 25)
                |rejectattr('attributes.device_class', '==', 'firmware')
                |rejectattr('entity_id','in', ignored ) 
                |rejectattr('entity_id', 'in', 
                  [
                    'update.home_assistant_operating_system_update',
                    'update.home_assistant_core_update',
                    'update.esphome_device_builder_update',
                    'update.esphome_update'
                  ])
              %}
                  {% set current = state_attr(state.entity_id, 'installed_version') %}
                  {% set latest = state_attr(state.entity_id, 'latest_version') %}
                  
                  {% if current and latest %}
                      {% set current_parts = current.split('.') %}
                      {% set latest_parts = latest.split('.') %}
                      {% set update_status = 1 if current_parts[0] == latest_parts[0] and current_parts[1] == latest_parts[1] and current_parts[2] != latest_parts[2] else 0 %}
                      {% if states.input_number.delay_auto_update.state is defined %}
                        {% set hours = states('input_number.delay_auto_update') | int %}
                      {% else %}
                        {% set hours = hours_map.get(update_status, 120) %}
                      {% endif %}
                      {% if as_timestamp(state.last_changed) | int + 60 * 60 * hours < as_timestamp(now()) | int %}
                          {% set result.updates = result.updates + [state.entity_id] %}
                      {% endif %}
                  {% endif %}
              {% endfor %}

              {{ result.updates|count > 0 }}
        then:
          - action: update.install
            data:
              backup: true
            target:
              entity_id: |-
                {% set ignored = label_entities('ignore') %}
                {% set result = namespace(updates=[]) %}
                {% set hours_map = {0: 72, 1: 24} %}

                {% for state in states.update 
                  |selectattr('state', '==', 'on')
                  |selectattr('attributes.supported_features', '==', 25)
                  |rejectattr('attributes.device_class', '==', 'firmware')
                  |rejectattr('entity_id','in', ignored ) 
                  |rejectattr('entity_id', 'in', 
                    [
                      'update.home_assistant_operating_system_update',
                      'update.home_assistant_core_update',
                      'update.esphome_device_builder_update',
                      'update.esphome_update'
                    ])
                %}
                  {% set current = state_attr(state.entity_id, 'installed_version') %}
                  {% set latest = state_attr(state.entity_id, 'latest_version') %}
                  
                  {% if current and latest %}
                      {% set current_parts = current.split('.') %}
                      {% set latest_parts = latest.split('.') %}
                      {% set update_status = 1 if current_parts[0] == latest_parts[0] and current_parts[1] == latest_parts[1] and current_parts[2] != latest_parts[2] else 0 %}
                      {% if states.input_number.delay_auto_update.state is defined %}
                        {% set hours = states('input_number.delay_auto_update') | int %}
                      {% else %}
                        {% set hours = hours_map.get(update_status, 120) %}
                      {% endif %}
                      {% if as_timestamp(state.last_changed) | int + 60 * 60 * hours < as_timestamp(now()) | int %}
                          {% set result.updates = result.updates + [state.entity_id] %}
                      {% endif %}
                  {% endif %}
                {% endfor %}

                {{ result.updates|list }}

      # HACS Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}
                
              {% set result = namespace(updates=[]) %}
              {% if states.input_number.delay_auto_update.state is defined %}
                {% set hours = states('input_number.delay_auto_update') | int %}
              {% else %}
                {% set hours = 72 %}
              {% endif %}

              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |selectattr('attributes.supported_features', '==', 23)
                |rejectattr('attributes.device_class', '==', 'firmware')
                |rejectattr('entity_id','in', ignored ) 
                |rejectattr('entity_id', 'in', 
                  [
                    'update.home_assistant_operating_system_update',
                    'update.home_assistant_core_update',
                    'update.esphome_device_builder_update',
                    'update.esphome_update'
                  ])
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endif %}
              {% endfor %}

              {{ result.updates|count > 0 }}
        then:
          - action: update.install
            target:
              entity_id: |-
                {% set ignored = label_entities('ignore') %}
                  
                {% set result = namespace(updates=[]) %}
                {% if states.input_number.delay_auto_update.state is defined %}
                  {% set hours = states('input_number.delay_auto_update') | int %}
                {% else %}
                  {% set hours = 72 %}
                {% endif %}

                {% for state in states.update 
                  |selectattr('state', '==', 'on')
                  |selectattr('attributes.supported_features', '==', 23)
                  |rejectattr('attributes.device_class', '==', 'firmware')
                  |rejectattr('entity_id','in', ignored ) 
                  |rejectattr('entity_id', 'in', 
                    [
                      'update.home_assistant_operating_system_update',
                      'update.home_assistant_core_update',
                      'update.esphome_device_builder_update',
                      'update.esphome_update'
                    ])
                %}
                  {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                    {% set result.updates = result.updates + [state.entity_id] %}
                  {% endif %}
                {% endfor %}

                {{ result.updates|list }}

      # Firmware Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}

              {% set result = namespace(updates=[]) %}
                {% if states.input_number.delay_auto_update.state is defined %}
                  {% set hours = states('input_number.delay_auto_update') | int %}
                {% else %}
                  {% set hours = 96 %}
                {% endif %}

              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |selectattr('attributes.device_class', '==', 'firmware')
                |rejectattr('entity_id','in', ignored )
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endif %}
              {% endfor %}

              {{ result.updates|count > 0 }}
        then:
          - action: update.install
            target:
              entity_id: |-
                {% set ignored = label_entities('ignore') %}

                {% set result = namespace(updates=[]) %}
                  {% if states.input_number.delay_auto_update.state is defined %}
                    {% set hours = states('input_number.delay_auto_update') | int %}
                  {% else %}
                    {% set hours = 96 %}
                  {% endif %}

                {% for state in states.update 
                  |selectattr('state', '==', 'on')
                  |selectattr('attributes.device_class', '==', 'firmware')
                  |rejectattr('entity_id','in', ignored )
                %}
                  {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                    {% set result.updates = result.updates + [state.entity_id] %}
                  {% endif %}
                {% endfor %}

                {{ result.updates | list }}

      # ESPHome Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}
              {% set result = namespace(updates=[]) %}
              {% set hours_map = {0: 120, 1: 24} %}

              {% for state in states.update 
                |selectattr('state', 'eq', 'on')
                |selectattr('entity_id', 'in', ['update.esphome_device_builder_update', 'update.esphome_update' ])
                |rejectattr('entity_id','in', ignored )  
              %}
                  {% set current = state_attr(state.entity_id, 'installed_version') %}
                  {% set latest = state_attr(state.entity_id, 'latest_version') %}
                  
                  {% if current and latest %}
                      {% set current_parts = current.split('.') %}
                      {% set latest_parts = latest.split('.') %}
                      {% set update_status = 1 if current_parts[0] == latest_parts[0] and current_parts[1] == latest_parts[1] and current_parts[2] != latest_parts[2] else 0 %}
                      {% if states.input_number.delay_auto_update.state is defined %}
                        {% set hours = states('input_number.delay_auto_update') | int %}
                      {% else %}
                        {% set hours = hours_map.get(update_status, 120) %}
                      {% endif %}
                      {% if as_timestamp(state.last_changed) | int + 60 * 60 * hours < as_timestamp(now()) | int %}
                          {% set result.updates = result.updates + [state.entity_id] %}
                      {% endif %}
                  {% endif %}
              {% endfor %}
              {{ result.updates | count > 0 }}
        then:
          - action: update.install
            target:
              entity_id: |-
                {% set ignored = label_entities('ignore') %}
                {% set result = namespace(updates=[]) %}
                {% set hours_map = {0: 120, 1: 24} %}

                {% for state in states.update 
                  |selectattr('state', 'eq', 'on')
                  |selectattr('entity_id', 'in', ['update.esphome_device_builder_update', 'update.esphome_update' ])
                  |rejectattr('entity_id','in', ignored )  
                %}
                  {% set current = state_attr(state.entity_id, 'installed_version') %}
                  {% set latest = state_attr(state.entity_id, 'latest_version') %}
                  
                  {% if current and latest %}
                      {% set current_parts = current.split('.') %}
                      {% set latest_parts = latest.split('.') %}
                      {% set update_status = 1 if current_parts[0] == latest_parts[0] and current_parts[1] == latest_parts[1] and current_parts[2] != latest_parts[2] else 0 %}
                      {% if states.input_number.delay_auto_update.state is defined %}
                        {% set hours = states('input_number.delay_auto_update') | int %}
                      {% else %}
                        {% set hours = hours_map.get(update_status, 120) %}
                      {% endif %}
                      {% if as_timestamp(state.last_changed) | int + 60 * 60 * hours < as_timestamp(now()) | int %}
                          {% set result.updates = result.updates + [state.entity_id] %}
                      {% endif %}
                  {% endif %}
                {% endfor %}
                {{ result.updates | list }}
          - wait_template: |-
              {% set ignored = label_entities('ignore') %}

              {% set result = namespace(updates=[]) %}
              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |selectattr('attributes.title', '==', 'ESPHome')
                |rejectattr('entity_id', 'in', ['update.esphome_device_builder_update', 'update.esphome_update' ])
                |rejectattr('entity_id','in', ignored )  
              %}
                {% set result.updates = result.updates + [state.entity_id] %}
              {% endfor %}

              {{ result.updates | count > 0 }}
            continue_on_timeout: true
            timeout: "00:30:00"

      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}

              {% set result = namespace(updates=[]) %}
              {% for state in states.update 
                |selectattr('state', '==', 'on')
                |selectattr('attributes.title', '==', 'ESPHome')
                |rejectattr('entity_id', '==', 'update.esphome_device_builder_update', 'update.esphome_update' )
                |rejectattr('entity_id','in', ignored )  
              %}
                {% set result.updates = result.updates + [state.entity_id] %}
              {% endfor %}

              {{ result.updates|count > 0 }}
        then:
          - action: update.install
            data: {}
            target:
              entity_id: |-
                {% set ignored = label_entities('ignore') %}

                {% set result = namespace(updates=[]) %}
                {% for state in states.update 
                  |selectattr('state', '==', 'on')
                  |selectattr('attributes.title', '==', 'ESPHome')
                  |rejectattr('entity_id', '==', 'update.esphome_device_builder_update', 'update.esphome_update' )
                  |rejectattr('entity_id','in', ignored )  
                %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endfor %}

                {{ result.updates|list }}


      # Wait to finish updates in progress
      - wait_template: "{{ states('sensor.updates_in_progress') | int == 0 }}"

      # Core Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}
              {% set result = namespace(updates=[]) %}
              {% set hours_map = {0: 120, 1: 24} %}

              {% for state in states.update 
                |selectattr('state', 'eq', 'on')
                |selectattr('entity_id', 'in', ['update.home_assistant_core_update' ])
                |rejectattr('entity_id','in', ignored )  
              %}
                  {% set current = state_attr(state.entity_id, 'installed_version') %}
                  {% set latest = state_attr(state.entity_id, 'latest_version') %}
                  
                  {% if current and latest %}
                      {% set current_parts = current.split('.') %}
                      {% set latest_parts = latest.split('.') %}
                      {% set update_status = 1 if current_parts[0] == latest_parts[0] and current_parts[1] == latest_parts[1] and current_parts[2] != latest_parts[2] else 0 %}
                      {% if states.input_number.delay_auto_update.state is defined %}
                        {% set hours = states('input_number.delay_auto_update') | int %}
                      {% else %}
                        {% set hours = hours_map.get(update_status, 120) %}
                      {% endif %}
                      {% if as_timestamp(state.last_changed) | int + 60 * 60 * hours < as_timestamp(now()) | int %}
                          {% set result.updates = result.updates + [state.entity_id] %}
                      {% endif %}
                  {% endif %}
              {% endfor %}

              {{ result.updates | count > 0 }}
        then:
          - action: update.install
            data:
              backup: true
            target:
              entity_id: update.home_assistant_core_update

      # Wait to finish updates in progress
      - wait_template: "{{ states('sensor.updates_in_progress') | int == 0 }}"

      # OS Update
      - if:
          - condition: template
            value_template: |-
              {% set ignored = label_entities('ignore') %}

              {% set result = namespace(updates=[]) %}
              {% if states.input_number.delay_auto_update.state is defined %}
                {% set hours = states('input_number.delay_auto_update') | int %}
              {% else %}
                {% set hours = 120 %}
              {% endif %}

              {% for state in states.update 
                |selectattr('state', 'eq', 'on')
                |selectattr('entity_id', 'in', ['update.home_assistant_operating_system_update' ])
                |rejectattr('entity_id','in', ignored )  
              %}
                {% if as_timestamp(state.last_changed) | int + 60*60*hours < as_timestamp(now()) | int %}
                  {% set result.updates = result.updates + [state.entity_id] %}
                {% endif %}
              {% endfor %}

              {{ result.updates | count > 0 }}
        then:
          - action: update.install
            target:
              entity_id: update.home_assistant_operating_system_update
