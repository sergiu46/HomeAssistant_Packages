# Version: 2023.10.1
# Package Server
# This package includes default integrations, automations 
# and sersors for server activity.

script:
  # Script to update this package from GitHub
  update_packages:
    alias: "ΙΙ Update Packages"
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'server.yaml' %}
            {{ url + account + path + name }}

input_boolean:
  maintenance_mode:
    name: "ΙΙ Maintenance Mode"
    icon: "hass:wrench-clock"

http:
  ip_ban_enabled: true
  login_attempts_threshold: 15
  # Setup NGINX
  use_x_forwarded_for: true
  trusted_proxies:
    - 172.30.33.0/24

downloader:
  download_dir: packages

# Enable log errors to fire events
system_log:
  fire_event: true

recorder:
  purge_keep_days: !secret recorder_keep_days
  exclude:
    entities:
      - automation.healthchecks

rest_command:
  # monitor server with healthchecks.io
  healthchecks:
    url: !secret healthchecks

#Telegram bot
telegram_bot:
  - platform: polling
    api_key: !secret telegram_api_key
    allowed_chat_ids: !secret telegram_allowed_chat_ids

notify:
    # Telegram notify
  - platform: telegram
    name: tiot_telegram
    chat_id: !secret telegram_notify_chat_id

sensor:
    # Server sensors
  - platform: systemmonitor
    resources:
      - type: processor_use
      - type: swap_use_percent
      - type: load_15m
      - type: memory_use_percent
      - type: disk_use_percent
        arg: /
      - type: disk_use
        arg: /

homeassistant:
  customize:
    sensor.processor_use:
      friendly_name: "ΙΙ Processor Use"
    sensor.load_15m:
      friendly_name: "ΙΙ Load (15m)"
    sensor.memory_use_percent:
      friendly_name: "ΙΙ Memory Use"
    sensor.swap_use_percent:
      friendly_name: "ΙΙ Swap Use"
    sensor.disk_use:
      friendly_name: "ΙΙ Disk Use"
    sensor.disk_use_percent:
      friendly_name: "ΙΙ Disk Use Percent"

logbook:
  exclude:
    entity_globs:
      # Exclude Load Sensors
      - sensor.*_load_*
      - sensor.load_*

group:
  turn_off_automations:
    name: "ΙΙ Turn OFF Automations"
    entities: []

automation:
    # Update Packages on server STOP
  - id: 'update_on_server_stop'
    alias: "ΙΙ Update Packages on STOP"
    description: ''
    trigger:
    - platform: homeassistant
      event: shutdown
    condition: []
    action:
    - service: script.turn_on
      target:
        entity_id: script.update_packages
    mode: single

    # Notify on server start using defined service
  - id: 'server_start'
    alias: "ΙΙ Server Start"
    description: ''
    trigger:
    - platform: homeassistant
      event: start
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
    - service: >-
        {% if states.input_text.notify_service_server.state is defined %}
          {% set notify_service = states('input_text.notify_service_server') %}
        {% else %}
          {% set notify_service = 'notify' %}
        {% endif %}
          
        {{ "notify." + notify_service }}
      data:
        message: ▶️ Serverul a pornit!
    mode: single

    # Notify on server Stop using defined service
  - id: 'server_stop'
    alias: "ΙΙ Server Stop"
    description: ''
    trigger:
    - platform: homeassistant
      event: shutdown
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
    - service: >-
        {% if states.input_text.notify_service_server.state is defined %}
          {% set notify_service = states('input_text.notify_service_server') %}
        {% else %}
          {% set notify_service = 'notify' %}
        {% endif %}
          
        {{ "notify." + notify_service }}
      data:
        message: ⏹️ Serverul s-a oprit!
    mode: single

    # Ping healthchecks.io every minute
  - id: 'healthchecks_update'
    alias: "ΙΙ HealthChecks"
    description: ''
    trigger:
      - platform: time_pattern
        minutes: /1
    condition: []
    action:
      - service: rest_command.healthchecks
    mode: restart

    # Notify when a nofitication can't be sent
  - id: failed_notification
    alias: 'ΙΙ Failed Notification'
    description: "Alert when a notification can't be sent."
    mode: single
    trigger:
      - platform: event
        event_type: system_log_event
        event_data:
          level: ERROR
    condition:
      - condition: template
        value_template: '{{ "Error sending message" in trigger.event.data.message[0] }}'
        enabled: true
    action:
      - service: persistent_notification.create
        data:
          message: "A apărut o problemă la trimiterea unei notificari. Anunță echipa tehnică! \n\n{{ trigger.event.data.message }}"
          title: Nu s-a putut trimite notificarea!
          notification_id: failed_notification
      - service: notify.notify
        data:
          title: Eroare notificare!
          message: A apărut o problemă la trimiterea unei notificari. Anunță echipa tehnică!

    # Reload things after script update_packages is run
  - id: 'update_packages'
    alias: "ΙΙ Update Packages"
    description: ''
    trigger:
      - platform: state
        entity_id: script.update_packages
        from: 'on'
        to: 'off'
    condition: []
    action:
      - service: automation.turn_off
        target:
          entity_id: group.turn_off_automations
      - service: input_boolean.reload
      - service: input_number.reload
      - service: input_text.reload
      - service: template.reload
      - service: group.reload
      - service: script.reload
      - service: homeassistant.reload_core_config
      - service: automation.turn_on
        target:
          entity_id: group.turn_off_automations
      - service: automation.reload
    mode: restart

    # Notify when CPU load 15m is above 4 and when goes back below 3
  - id: 'cpu_load_15m'
    alias: "ΙΙ CPU Load"
    description: ''
    trigger:
      - platform: numeric_state
        entity_id: sensor.load_15m
        above: '4'
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - service: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% else %}
            {% set notify_service = 'notify' %}
          {% endif %}
           
          {{ "notify." + notify_service }}
        data:
          message: "🟡 CPU Load (15m) = {{ states('sensor.load_15m') }}"
      - wait_template: "{{ states( 'sensor.load_15m' ) | float < 3 }}"
      - service: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% else %}
            {% set notify_service = 'notify' %}
          {% endif %}
           
          {{ "notify." + notify_service }}
        data:
          message: "🟢 CPU Load (15m) = {{ states('sensor.load_15m') }}"
    mode: single
    max_exceeded: silent

    # Notify when RAM is almost full
  - id: 'ram_usage'
    alias: "ΙΙ RAM Usage"
    description: ''
    trigger:
      - platform: numeric_state
        entity_id: sensor.memory_use_percent
        above: '85'
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - service: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% else %}
            {% set notify_service = 'notify' %}
          {% endif %}
           
          {{ "notify." + notify_service }}
        data:
          message: "🟡 RAM = {{ states('sensor.memory_use_percent') }}%"
      - wait_template: "{{ states( 'sensor.memory_use_percent' ) | float < 80 }}"
      - service: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% else %}
            {% set notify_service = 'notify' %}
          {% endif %}
          {{ "notify." + notify_service }}
        data:
          message: "🟢 RAM = {{ states('sensor.memory_use_percent') }}%"
    mode: single
    max_exceeded: silent

    # Notify when storage is almost full
  - id: 'disk_usage'
    alias: "ΙΙ Disk Usage"
    description: ''
    trigger:
      - platform: numeric_state
        entity_id: sensor.disk_use_percent
        above: '70'
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - service: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% else %}
            {% set notify_service = 'notify' %}
          {% endif %}
          {{ "notify." + notify_service }}
        data:
          message: "🟡 Disk = {{ states('sensor.disk_use_percent') }}%"
      - wait_template: "{{ states( 'sensor.disk_use_percent' ) | float < 60 }}"
      - service: >-
          {% if states.input_text.notify_service_server.state is defined %}
            {% set notify_service = states('input_text.notify_service_server') %}
          {% else %}
            {% set notify_service = 'notify' %}
          {% endif %}
          {{ "notify." + notify_service }}
        data:
          message: "🟢 Disk = {{ states('sensor.disk_use_percent') }}%"
    mode: restart

    # Restart NginX addon weekly
  - id: restart_nginx_addon
    alias: "ΙΙ Restart NginX Addon"
    description: ""
    trigger:
      - platform: time
        at: "05:00:00"
    condition:
      - condition: time
        weekday:
          - fri
    action:
      - if:
          - condition: template
            value_template: >-
              {{ states('update.nginx_home_assistant_ssl_proxy_update') is defined }}
        then:
          - service: hassio.addon_restart
            data:
              addon: core_nginx_proxy
    mode: restart

  - id: maintenance_on_off
    alias: "ΙΙ Maintenance ON/OFF"
    description: ""
    trigger:
      - platform: state
        entity_id:
          - sensor.updates_in_progress
    condition: []
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                below: 1
            sequence:
              - service: input_boolean.turn_off
                data: {}
                target:
                  entity_id: input_boolean.maintenance_mode
          - conditions:
              - condition: numeric_state
                entity_id: sensor.updates_in_progress
                above: 2
            sequence:
              - service: input_boolean.turn_on
                data: {}
                target:
                  entity_id: input_boolean.maintenance_mode
    mode: single
 
  - id: maintenance_notifications
    alias: "ΙΙ Maintenance Notifications"
    description: ""
    mode: single
    trigger:
      - platform: state
        entity_id:
          - input_boolean.maintenance_mode
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.maintenance_mode
                state: "on"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_server.state is defined %}
                    {% set notify_service = states('input_text.notify_service_server') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    🔧 Mentenanță în curs!
                    
                    Vă informăm că mentenanța ar putea afecta funcționarea automatizărilor, aplicației și dispozitivelor. Ne cerem scuze pentru orice neplăceri pe care acestea le-ar putea cauza.
                    
                    ✉️ Vă vom anunța imediat ce mentenanța va fi finalizată și când toate serviciile noastre vor fi din nou disponibile.
          - conditions:
              - condition: state
                entity_id: input_boolean.maintenance_mode
                state: "off"
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_server.state is defined %}
                    {% set notify_service = states('input_text.notify_service_server') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    🎉 Mentenanță finalizată!
                    
                    Mentenanța a fost finalizată cu succes. Toate serviciile și dispozitivele sunt acum disponibile. Anunță-ne dacă întâmpini probleme sau observi anomalii de funcționare.
                    
                    🙏 Mulțumim pentru răbdare și pentru alegerea serviciilor noastre.
