# Version: 2024.07.6
# Low Batteries Package
#
# Count and list of entities device class battery with the value under 20
#
# To change the delay of low battery notifications create a input number helper named: "𐃏 Delay Notifiy Batteries"
# and set the number of minutes to wait until send the notification
#
# To change the notification service create an input text helper named: "𐃏 Notify Service Batteries"
# and put inside the name of the service you want. 
#
# If you want to exlcude entities assign a label named Ignore to them.


script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'low_battery.yaml' %}
            {{ url + account + path + name }}

template:
  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "𐃏 Low Batteries"
        icon: "hass:battery-alert-variant-outline"
        state: >
              {% set ignored = label_entities('ignore') %}
                    
              {% if states.input_number.battery_level_threshold.state is defined %}
                {% set threshold = states('input_number.battery_level_threshold') | int %}
              {% else %}
                {% set threshold = 20 %}
              {% endif %}
              
              {% set result = namespace(sensors=[]) %}
              {% for state in states.sensor 
                |selectattr('attributes.device_class', 'defined')
                |selectattr('attributes.device_class', '==', 'battery')
                |rejectattr('entity_id','in', ignored) 
              %}
              {% if 0 <= state.state | int (-1) < threshold | int  %}
                {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ '%)'] %}
              {% endif %}
              {% endfor %}
              {{ result.sensors|count }}
        attributes:
            names: >
              {% set ignored = label_entities('ignore') %}
                    
              {% if states.input_number.battery_level_threshold.state is defined %}
                {% set threshold = states('input_number.battery_level_threshold') | int %}
              {% else %}
                {% set threshold = 20 %}
              {% endif %}
              
              {% set result = namespace(sensors=[]) %}
              {% for state in states.sensor 
                |selectattr('attributes.device_class', 'defined')
                |selectattr('attributes.device_class', '==', 'battery')
                |rejectattr('entity_id','in', ignored) 
              %}
              {% if 0 <= state.state | int (-1) < threshold | int  %}
                {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ '%)'] %}
              {% endif %}
              {% endfor %}
              {{ result.sensors|join (', ') }}
    binary_sensor:
      - name: "𐃏 Batteries OK"
        icon: "hass:battery-heart-variant"
        state: >
              {% set ignored = label_entities('ignore') %}
                    
              {% if states.input_number.battery_level_threshold.state is defined %}
                {% set threshold = states('input_number.battery_level_threshold') | int + 10 %}
              {% else %}
                {% set threshold = 30 %}
              {% endif %}
              
              {% set result = namespace(sensors=[]) %}
              {% for state in states.sensor 
                |selectattr('attributes.device_class', 'defined')
                |selectattr('attributes.device_class', '==', 'battery')
                |rejectattr('entity_id','in', ignored) 
              %}
              {% if 0 <= state.state | int (-1) < threshold | int  %}
                {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ '%)'] %}
              {% endif %}
              {% endfor %}
              {{ result.sensors|count == 0 }}

input_number:
  low_batteries_last_triggered:
    name: "𐃏 Low Batteries Last Triggered"
    icon: "hass:alert-circle"
    mode: box
    min: 0
    max: 99999
    step: 1

automation:
  - id: "low_batteries"
    alias: "𐃏 Low Batteries"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.low_batteries
        to: ~
      - platform: state
        entity_id: binary_sensor.batteries_ok
      - platform: homeassistant
        event: start
    condition:
      - condition: template
        value_template: "{{ states.sensor.low_batteries.state is defined }}"
      - condition: template
        value_template: "{{ states.binary_sensor.batteries_ok.state is defined }}"
    action:
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.low_batteries
                above: '0'
                below: '2'
              - condition: template
                value_template: >-
                  {{ states('input_number.low_batteries_last_triggered') | int
                  != states('sensor.low_batteries') | int }}
            sequence:
              - delay: 
                  minutes: >-
                    {% if states.input_number.delay_notify_batteries.state is defined %}
                      {% set minutes = states('input_number.delay_notify_batteries') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: >-
                  {% if states.input_text.notify_service_batteries.state is defined %}
                    {% set notify_service = states('input_text.notify_service_batteries') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚠️ Este un dispozitiv cu baterie descărcată:
                    – {{ state_attr('sensor.low_batteries','names').split(',') | join('
                    –') }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.low_batteries_last_triggered
                data:
                  value: "{{ states('sensor.low_batteries') | int }}"
          - conditions:
              - condition: numeric_state
                entity_id: sensor.low_batteries
                above: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.low_batteries_last_triggered') | int
                  != states('sensor.low_batteries') | int }}
            sequence:
              - delay: 
                  minutes: >-
                    {% if states.input_number.delay_notify_batteries.state is defined %}
                      {% set minutes = states('input_number.delay_notify_batteries') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: >-
                  {% if states.input_text.notify_service_batteries.state is defined %}
                    {% set notify_service = states('input_text.notify_service_batteries') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚠️ Sunt {{ states('sensor.low_batteries') | int }} dispozitive cu bateria descărcată:
                    – {{ state_attr('sensor.low_batteries','names').split(',') | join('
                    –') }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.low_batteries_last_triggered
                data:
                  value: "{{ states('sensor.low_batteries') | int }}"
          - conditions:
              - condition: state
                entity_id: binary_sensor.batteries_ok
                state: 'on'
              - condition: state
                entity_id: input_boolean.low_batteries_alert
                state: 'on'
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_batteries.state is defined %}
                    {% set notify_service = states('input_text.notify_service_batteries') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    🔋 Starea bateriilor este bună!
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.low_batteries_alert
              - service: input_number.set_value
                target:
                  entity_id: input_number.low_batteries_last_triggered
                data:
                  value: "{{ states('sensor.low_batteries') | int }}"
        default: []
