# Version: 2024.04.1
# Problems found Package
#
# List all available problems entities with device class problem
#
# To change the delay of problems notifications create a input number helper named: "|| Delay Notifiy Problems"
# and set the number of minutes to wait until send the notification.
#
# To change the notification service create an input text helper named: "|| Notify Service Problems"
# and put inside the name of the service you want. 
#
# If you want to exlcude entities create an imput select helper named: "|| Ignored Problems" 
# and add all entity id's that you want to exclude as options.
#


script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% if states.input_text.packages_account.state is defined %}
              {% set account = states('input_text.packages_account') %}
            {% else %}
              {% set account = 'topaniot' %}
            {% endif %}
            {% set path = '/HomeAssistant_Packages/main/packages/' %}
            {% set name = 'problems.yaml' %}
            {{ url + account + path + name }}
            
            
group:
  turn_off_automations:
    entities:
      - automation.problems_detected

template:
  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "|| Problems Detected"
        icon: "hass:alert-outline"
        state: >
              {% set ignored = label_entities('ignore') %}
                    
              {{ states.binary_sensor
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','eq','problem')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in', ignored )
                |list|count 
              }}
        attributes:
            names: >
              {% set ignored = label_entities('ignore') %}
                    
              {{ states.binary_sensor
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','eq','problem')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in', ignored )
                |map(attribute='name')|join (", ")
              }}

input_number:
  problems_detected_last_triggered:
    name: "|| Problems Detected Last Triggered"
    icon: "hass:alert-circle"
    mode: box
    min: 0
    max: 99999
    step: 1

automation:
  # Notify when problems are detected
  - id: "problems_detected"
    alias: "|| Problems Detected"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.problems_detected
      - platform: homeassistant
        event: start
      - platform: state
        entity_id:
          - input_boolean.maintenance_mode
        to: "off"
    condition:
      - condition: state
        entity_id: input_boolean.maintenance_mode
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.problems_detected
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                above: '0'
                below: '2'
              - condition: template
                value_template: >-
                  {{ states('input_number.problems_detected_last_triggered') | int
                  != states('sensor.problems_detected') | int }}
            sequence:
              - delay: 
                  minutes: >
                    {% if states.input_number.delay_notify_problems.state is defined %}
                      {% set minutes = states('input_number.delay_notify_problems') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.problems_detected_last_triggered
                data:
                  value: "{{ states('sensor.problems_detected') | int }}"
              - service: >
                  {% if states.input_text.notify_service_problems.state is defined %}
                    {% set notify_service = states('input_text.notify_service_problems') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚠️ Este o problema:
                    – {{ state_attr('sensor.problems_detected','names').split(',') | join('
                    –') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                above: '1'
              - condition: template
                value_template: >
                  {{ states('input_number.problems_detected_last_triggered') | int
                  != states('sensor.problems_detected') | int }}
            sequence:
              - delay: 
                  minutes: >-
                    {% if states.input_number.delay_notify_problems.state is defined %}
                      {% set minutes = states('input_number.delay_notify_problems') | int %}
                    {% else %}
                      {% set minutes = 10 %}
                    {% endif %}
                    {{ minutes }}
              - service: input_number.set_value
                target:
                  entity_id: input_number.problems_detected_last_triggered
                data:
                  value: "{{ states('sensor.problems_detected') | int }}"
              - service: >-
                  {% if states.input_text.notify_service_problems.state is defined %}
                    {% set notify_service = states('input_text.notify_service_problems') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: |
                    ⚠️ Sunt {{ states('sensor.problems_detected')|int }} probleme:
                    – {{ state_attr('sensor.problems_detected','names').split(',') | join('
                    –') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                below: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.problems_detected_last_triggered') | int > 0 }}
            sequence:
              - service: >-
                  {% if states.input_text.notify_service_problems.state is defined %}
                    {% set notify_service = states('input_text.notify_service_problems') %}
                  {% elif states.input_text.notify_service.state is defined %}
                    {% set notify_service = states('input_text.notify_service') %}
                  {% else %}
                    {% set notify_service = 'notify' %}
                  {% endif %}
                  {{ "notify." + notify_service }}
                data:
                  message: "👌 Probleme rezolvate!"
              - service: input_number.set_value
                target:
                  entity_id: input_number.problems_detected_last_triggered
                data:
                  value: "{{ states('sensor.problems_detected') | int }}"
        default: []
