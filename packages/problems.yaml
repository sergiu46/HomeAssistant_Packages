# Version: 2023.04.13-1
# Package - Problems found
# List all available problems entities with device class problem
#
# You must set in secrets.yaml
# notify_service_problems: "notify.notify"
# delay_notify_problems: "00:10:00"
#
# If you want to exlcude entities create group ignored_problems in groups.yaml
#
# Example:
# ignored_problems:
#   entities:
#     - binary_sensor.sensor_active_2h

script:
  # Script to update this package from GitHub
  update_packages:
    sequence:
      - service: downloader.download_file
        data:
          overwrite: true
          url: >-
            {% set url = 'https://raw.githubusercontent.com/' %}
            {% set account = states('input_text.packages_account') %}
            {% set file_path = '/HomeAssistant_Packages/main/packages/problems.yaml' %}
            {{ url + account + file_path }}
            
            
group:
  ignored_problems:
    name: "|| Ignored Updates"
    entities: []

  turn_off_automations:
    entities:
      - automation.problems_detected

template:
  - trigger:
      - platform: time_pattern
        seconds: "/1"
    sensor:
      - name: "|| Problems Detected"
        icon: "hass:alert-outline"
        state: >
              {{ states.binary_sensor
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','eq','problem')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_problems','entity_id'))
                |list|count 
              }}
        attributes:
            names: >
              {{ states.binary_sensor
                |selectattr('attributes.device_class','defined')
                |selectattr('attributes.device_class','eq','problem')
                |rejectattr('state', 'in', ['off','unknown','unavailable','none'])
                |rejectattr('entity_id','in',state_attr('group.ignored_problems','entity_id'))
                |map(attribute='name')|join (", ")
              }}

input_number:
  problems_detected_last_triggered:
    name: "|| Problems Detected Last Triggered"
    icon: "hass:alert-circle"
    mode: box
    min: 0
    max: 99999
    step: 1

automation:
  # Notify when updates are available
  - id: "problems_detected"
    alias: "|| Problems Detected"
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.problems_detected
      - platform: homeassistant
        event: start
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.problems_detected
                state: unknown
            sequence: []
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                above: '0'
                below: '2'
              - condition: template
                value_template: >-
                  {{ states('input_number.problems_detected_last_triggered') | int
                  != states('sensor.problems_detected') | int }}
            sequence:
              - delay: !secret delay_notify_problems
              - service: input_number.set_value
                target:
                  entity_id: input_number.problems_detected_last_triggered
                data:
                  value: "{{ states('sensor.problems_detected') | int }}"
              - service: !secret notify_service_problems
                data:
                  message: |
                    ⚠️ Este o problema:
                    – {{ state_attr('sensor.problems_detected','names').split(',') | join('
                    –') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                above: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.problems_detected_last_triggered') | int
                  != states('sensor.problems_detected') | int }}
            sequence:
              - delay: !secret delay_notify_problems
              - service: input_number.set_value
                target:
                  entity_id: input_number.problems_detected_last_triggered
                data:
                  value: "{{ states('sensor.problems_detected') | int }}"
              - service: !secret notify_service_problems
                data:
                  message: |
                    ⚠️ Sunt {{ states('sensor.problems_detected')|int }} probleme:
                    – {{ state_attr('sensor.problems_detected','names').split(',') | join('
                    –') }}
          - conditions:
              - condition: numeric_state
                entity_id: sensor.problems_detected
                below: '1'
              - condition: template
                value_template: >-
                  {{ states('input_number.problems_detected_last_triggered') | int > 0 }}
            sequence:
              - service: !secret notify_service_problems
                data:
                  message: "👌 Probleme rezolvate!"
              - service: input_number.set_value
                target:
                  entity_id: input_number.problems_detected_last_triggered
                data:
                  value: "{{ states('sensor.problems_detected') | int }}"
        default: []
